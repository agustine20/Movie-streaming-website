  <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Movie Streaming - Login</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                text-align: center;
                background-color: orange;
                color: white;
                margin-top: 50px;
            }
            input {
                display: block;
                margin: 10px auto;
                padding: 10px;
                width: 250px;
            }
            button {
                padding: 10px 20px;
                cursor: pointer;
                background: white;
                color: orange;
                border: none;
                font-size: 16px;
                font-weight: bold;
            }
            button:hover {
                background: black;
                color: white;
            }
            #dashboard {
                display: none;
            }
        </style>
    </head>
    <body>
        <div id="login">
            <h2>Login</h2>
            <form id="loginForm">
                <input type="email" id="email" placeholder="Email" required>
                <input type="password" id="password" placeholder="Password" required>
                <button type="submit">Login</button>
            </form>
        </div>

        <div id="dashboard">
            <h2>Welcome to Movie Streaming</h2>
            <p>Enjoy your favorite movies!</p>
            <button onclick="logout()">Logout</button>
        </div>

        <script>
            document.getElementById("loginForm").addEventListener("submit", async (e) => {
                e.preventDefault();

                const email = document.getElementById("email").value;
                const password = document.getElementById("password").value;

                try {
                    const res = await fetch("/login", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ email, password })
                    });

                    const data = await res.json();
                    if (res.ok) {
                        localStorage.setItem("token", data.token);
                        alert("Login Successful");
                        document.getElementById("login").style.display = "none";
                        document.getElementById("dashboard").style.display = "block";
                    } else {
                        alert(data.message);
                    }
                } catch (error) {
                    console.error("Error:", error);
                }
            });

            function logout() {
                localStorage.removeItem("token");
                alert("Logged Out");
                document.getElementById("login").style.display = "block";
                document.getElementById("dashboard").style.display = "none";
            }
        </script>
    </body>
    </html>
    
<ALOASK-SEPARATE-EDITORS>require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const cors = require("cors");

const app = express();
app.use(express.json());
app.use(cors());

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log("MongoDB Connected"))
    .catch(err => console.log(err));

const UserSchema = new mongoose.Schema({
    username: String,
    email: String,
    password: String
});

const User = mongoose.model("User", UserSchema);

// User Registration
app.post("/register", async (req, res) => {
    const { username, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);

    try {
        const newUser = new User({ username, email, password: hashedPassword });
        await newUser.save();
        res.status(201).json({ message: "User registered successfully" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// User Login
app.post("/login", async (req, res) => {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (!user) return res.status(400).json({ message: "User not found" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "Invalid credentials" });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });
    res.json({ token, user: { username: user.username, email: user.email } });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));<ALOASK-SEPARATE-EDITORS>